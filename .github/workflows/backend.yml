name: Cloud Asset API - CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and Verify FastAPI Project

    steps:
      # 1Ô∏è‚É£ Checkout your repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # 3Ô∏è‚É£ Cache pip dependencies
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4Ô∏è‚É£ Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      # 5Ô∏è‚É£ Validate Python syntax
      - name: Validate Code Syntax
        run: python -m compileall .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    name: Deploy to AWS Lambda with Zappa

    if: github.ref == 'refs/heads/main' && success()

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Create Virtual Environment
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install zappa

      - name: Inject Environment Variables into Zappa Settings
        run: |
          python - <<'PY'
          import json, os
          path = "zappa_settings.json"
          with open(path) as f:
              data = json.load(f)
          envs = data["production"]["environment_variables"]
          envs["MONGO_URI"] = os.environ["MONGO_URI"]
          envs["SECRET_KEY"] = os.environ["SECRET_KEY"]
          envs["ALGORITHM"] = os.environ["ALGORITHM"]
          envs["ACCESS_TOKEN_EXPIRE_MINUTES"] = os.environ["ACCESS_TOKEN_EXPIRE_MINUTES"]
          with open(path, "w") as f:
              json.dump(data, f, indent=2)
          print("‚úÖ Updated environment variables in zappa_settings.json")
          PY

      - name: Deploy or Update Lambda
        run: |
          source venv/bin/activate
          if zappa status production > /dev/null 2>&1; then
            echo "üîÅ Updating existing Lambda..."
            zappa update production
          else
            echo "üöÄ Deploying new Lambda..."
            zappa deploy production
          fi
